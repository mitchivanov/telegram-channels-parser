version: '3.8'

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"

  parser:
    build: ./parser
    container_name: parser
    volumes:
      - parser_session:/app/session
      - parser_temp:/app/temp
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    environment:
      - TELEGRAM_CONFIG=/app/config/telegram_config.json
      - KAFKA_CONFIG=/app/config/kafka_config.json
      - REDIS_URL=redis://redis:6379/0
    restart: unless-stopped

  notifications-bot:
    build: ./notifications-bot
    container_name: notifications-bot
    depends_on:
      redis:
        condition: service_started
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CODE_BOT_TOKEN=${CODE_BOT_TOKEN}
      - ADMIN_IDS=${ADMIN_IDS}
    restart: unless-stopped

  filter-backend:
    build:
      context: ./filter
      dockerfile: Dockerfile
    container_name: filter-backend
    env_file:
      - ./filter/.env
    environment:
      - CHANNEL1_ID=${CHANNEL1_ID}
      - CHANNEL2_ID=${CHANNEL2_ID}
      - CHANNEL3_ID=${CHANNEL3_ID}
    ports:
      - "8005:8000"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      db:
        condition: service_started
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./filter:/app
      - parser_temp:/app/temp

  filter-worker:
    build:
      context: ./filter
      dockerfile: Dockerfile
    container_name: filter-worker
    env_file:
      - ./filter/.env
    environment:
      - CHANNEL1_ID=${CHANNEL1_ID}
      - CHANNEL2_ID=${CHANNEL2_ID}
      - CHANNEL3_ID=${CHANNEL3_ID}
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      db:
        condition: service_started
    restart: unless-stopped
    command: python kafka_worker.py
    volumes:
      - ./filter:/app
      - parser_temp:/app/temp

  filter-frontend:
    build:
      context: ./filter/frontend
      dockerfile: Dockerfile
    container_name: filter-frontend
    ports:
      - "8085:80"
    depends_on:
      filter-backend:
        condition: service_started
    restart: unless-stopped

  channels-bot:
    build:
      context: ./channels-bot
    container_name: channels-bot
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPICS=channel1_posts,channel2_posts,channel3_posts
      - CHANNEL1_ID=${CHANNEL1_ID}
      - CHANNEL2_ID=${CHANNEL2_ID}
      - CHANNEL3_ID=${CHANNEL3_ID}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - parser_temp:/app/temp

  channels-cleanup-worker:
    build:
      context: ./channels-bot
    container_name: channels-cleanup-worker
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_started
    restart: unless-stopped
    command: python -u cleanup_worker.py
    volumes:
      - parser_temp:/app/temp

  db:
    image: postgres:15
    container_name: db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=filter
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: unless-stopped
    ports:
      - "9003:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy

  # Monitoring stack - disabled for now
  # loki:
  #   image: grafana/loki:2.9.2
  #   container_name: loki
  #   ports:
  #     - "3101:3100"
  #   command: -config.file=/etc/loki/local-config.yaml
  #   user: "0:0"
  #   volumes:
  #     - loki_data:/loki
  #     - ./loki-config.yaml:/etc/loki/local-config.yaml
  #   restart: unless-stopped

  # promtail:
  #   image: grafana/promtail:2.9.2
  #   container_name: promtail
  #   volumes:
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/log:/var/log:ro
  #     - ./promtail-config.yaml:/etc/promtail/config.yaml
  #   command: -config.file=/etc/promtail/config.yaml
  #   depends_on:
  #     - loki

  # prometheus:
  #   image: prom/prometheus:v2.51.2
  #   container_name: prometheus
  #   ports:
  #     - "9091:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - --config.file=/etc/prometheus/prometheus.yml
  #     - --storage.tsdb.path=/prometheus
  #     - --web.enable-lifecycle

  # node-exporter:
  #   image: prom/node-exporter:v1.8.1
  #   container_name: node-exporter
  #   ports:
  #     - "9101:9100"
  #   restart: unless-stopped

  # grafana:
  #   image: grafana/grafana:10.2.3
  #   container_name: grafana
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   depends_on:
  #     - loki
  #     - prometheus
  #   volumes:
  #     - grafana_data:/var/lib/grafana

  filter-bot:
    build:
      context: ./filter-bot
      dockerfile: Dockerfile
    container_name: filter-bot
    env_file:
      - ./filter-bot/.env
    depends_on:
      - redis
    restart: unless-stopped
    volumes:
      - parser_temp:/app/temp

volumes:
  kafka_data:
  db_data:
  parser_session:
  parser_temp:
  # Monitoring volumes - disabled
  # grafana_data:
  # loki_data: