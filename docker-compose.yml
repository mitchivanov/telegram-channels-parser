version: '3.8'

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    mem_limit: 1.5g
    cpus: 1.5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"

  parser:
    build: ./parser
    container_name: parser
    volumes:
      - parser_session:/app/session
      - parser_temp:/app/temp
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    environment:
      - TELEGRAM_CONFIG=/app/config/telegram_config.json
      - KAFKA_CONFIG=/app/config/kafka_config.json
      - REDIS_URL=redis://redis:6379/0
    restart: unless-stopped
    mem_limit: 512m
    cpus: 0.5

  notifications-bot:
    build: ./notifications-bot
    container_name: notifications-bot
    depends_on:
      redis:
        condition: service_started
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CODE_BOT_TOKEN=${CODE_BOT_TOKEN}
      - ADMIN_IDS=${ADMIN_IDS}
    restart: unless-stopped
    mem_limit: 256m
    cpus: 0.25

  filter-backend:
    build:
      context: ./filter
      dockerfile: Dockerfile
    container_name: filter-backend
    env_file:
      - ./filter/.env
    environment:
      - CHANNEL1_ID=${CHANNEL1_ID}
      - CHANNEL2_ID=${CHANNEL2_ID}
      - CHANNEL3_ID=${CHANNEL3_ID}
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      db:
        condition: service_started
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./filter:/app
      - parser_temp:/app/temp
    mem_limit: 512m
    cpus: 0.5

  filter-worker:
    build:
      context: ./filter
      dockerfile: Dockerfile
    container_name: filter-worker
    env_file:
      - ./filter/.env
    environment:
      - CHANNEL1_ID=${CHANNEL1_ID}
      - CHANNEL2_ID=${CHANNEL2_ID}
      - CHANNEL3_ID=${CHANNEL3_ID}
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
      db:
        condition: service_started
    restart: unless-stopped
    command: python kafka_worker.py
    volumes:
      - ./filter:/app
      - parser_temp:/app/temp
    mem_limit: 512m
    cpus: 0.5

  filter-frontend:
    build:
      context: ./filter/frontend
      dockerfile: Dockerfile
    container_name: filter-frontend
    ports:
      - "8080:80"
    depends_on:
      filter-backend:
        condition: service_started
    restart: unless-stopped
    mem_limit: 256m
    cpus: 0.25

  channels-bot:
    build:
      context: ./channels-bot
    container_name: channels-bot
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPICS=channel1_posts,channel2_posts,channel3_posts
      - CHANNEL1_ID=${CHANNEL1_ID}
      - CHANNEL2_ID=${CHANNEL2_ID}
      - CHANNEL3_ID=${CHANNEL3_ID}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - parser_temp:/app/temp
    mem_limit: 256m
    cpus: 0.25

  channels-cleanup-worker:
    build:
      context: ./channels-bot
    container_name: channels-cleanup-worker
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_started
    restart: unless-stopped
    command: python cleanup_worker.py
    volumes:
      - parser_temp:/app/temp
    mem_limit: 128m
    cpus: 0.15

  db:
    image: postgres:15
    container_name: db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=filter
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    mem_limit: 1g
    cpus: 1.0

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: unless-stopped
    ports:
      - "9002:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy
    mem_limit: 256m
    cpus: 0.25

volumes:
  kafka_data:
  db_data:
  parser_session:
  parser_temp: